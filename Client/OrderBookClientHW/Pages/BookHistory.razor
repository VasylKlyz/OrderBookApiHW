@page "/BookHistory"
@using OrderBookClientHW.Services
@using ChartJs.Blazor.BarChart
@using ChartJs.Blazor.Common
@using ChartJs.Blazor.Util
@using ChartJs.Blazor
@using System.Drawing
@using Bitfinex.Client.Websocket.Responses.Books
@using ChartJs.Blazor.Common.Enums
@inject OrderBookHistoryService OrderBookHistoryService
<h3>BookHistory</h3>

<div style="display: flex; ">
    <div style="width: 50%">
        <Chart Config="_configBid" @ref="_chartBid"></Chart>
    </div>
    <div style="width: 50%">
        <Chart Config="_configAsk" @ref="_chartAsk"></Chart>
    </div>
</div>

<EditForm Model="@this">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="textInput">Enter Date:</label>
        <InputText id="textInput" placeholder="YYYY-MM-DD" class="form-control" @bind-Value="_dateTimeInput" />
    </div>
    
    <button class="btn btn-primary" @onclick="OnLoadClick">Load</button>
</EditForm>
@code {
    private BarConfig _configAsk;
    private BarConfig _configBid;
    private Chart _chartAsk;
    private Chart _chartBid;
    private string _dateTimeInput = "";
    private DateTime _selectedDate = DateTime.Now;
    
  
    private async Task OnLoadClick()
    {
        _selectedDate = DateTime.Parse(_dateTimeInput);
        await RenderChartsAsync();
    }
    
    private async Task RenderChartsAsync()
    {
        var bookHistory = await OrderBookHistoryService.GetHistory(_selectedDate);

        await RenderBidChartAsync(bookHistory.Bids);
        await RenderAskChartAsync(bookHistory.Asks);
    }
    
    private async Task RenderBidChartAsync(Dictionary<string, Book> bids)
    {
        _configBid.Data.Labels.Clear();
        _configBid.Data.Datasets.Clear();
    
       
        var amounts  = new List<double>();
        
        foreach (var key in bids.Keys)
        {
            // Summing the amounts for cumulative depth
            amounts.Add(bids[key].Amount);
            _configBid.Data.Labels.Add(key);
        }

        
        IDataset<double> dataset = new BarDataset<double>(amounts)
        {
            Label = "Bid",
            BackgroundColor = ColorUtil.FromDrawingColor(Color.Green)
        };

        _configBid.Data.Datasets.Add(dataset);
    
        await _chartBid.Update();
    }
    
    private async Task RenderAskChartAsync(Dictionary<string, Book> asks)
    {
        _configAsk.Data.Labels.Clear();
        _configAsk.Data.Datasets.Clear();
        
        var amounts  = new List<double>();

        foreach (var key in asks.Keys)
        {
            amounts.Add(-asks[key].Amount);
            _configAsk.Data.Labels.Add(key);
        }

        IDataset<double> dataset = new BarDataset<double>(amounts)
        {
            Label = "ask",
            BackgroundColor = ColorUtil.FromDrawingColor(Color.Red)
        };

        _configAsk.Data.Datasets.Add(dataset);
        
        await _chartAsk.Update();
    }
    
    protected override async Task OnInitializedAsync()
    {
        _configAsk = new BarConfig
        {
            Options = new BarOptions
            {
                Responsive = true,
                Legend = new Legend
                {
                    Position = Position.Top
                },
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "Ask"
                },
                Animation = new Animation
                {
                    Duration = 0
                },
                Tooltips = new Tooltips
                {
                    Enabled = false
                },
            }
        };
        
        _configBid = new BarConfig
        {
            Options = new BarOptions
            {
                Responsive = true,
                Legend = new Legend
                {
                    Position = Position.Top
                },
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "Bid"
                },
                Animation = new Animation
                {
                    Duration = 0
                },
                Tooltips = new Tooltips
                {
                    Enabled = false
                },
            }
        };

        await RenderChartsAsync();
    }
    
}