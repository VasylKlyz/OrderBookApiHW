@using OrderBookClientHW.Services
@using ChartJs.Blazor.BarChart
@using ChartJs.Blazor.Common
@using ChartJs.Blazor.Common.Enums
@using ChartJs.Blazor
@using ChartJs.Blazor.Util
@using System.Drawing
@inject OrderBookHubClientService OrderBookService
@implements IDisposable

<Chart Config="_config" @ref="_chart"></Chart>

@code {
    private BarConfig _config;
    private Chart _chart;
    
    private async Task RenderAskChartAsync()
    {
        _config.Data.Labels.Clear();
        _config.Data.Datasets.Clear();
        
        var asks = OrderBookService.GetAsk();

        
        var sortedAsks = asks.OrderBy(kvp => kvp.Key);
        double cumulativeAmount = 0;
        var cumulativeAmounts  = new List<double>();

        foreach (var ask in sortedAsks)
        {
            cumulativeAmount += -ask.Value.Amount; 
            cumulativeAmounts.Add(cumulativeAmount);
            
            _config.Data.Labels.Add(ask.Key);
        }

        IDataset<double> dataset = new BarDataset<double>(cumulativeAmounts)
        {
            Label = "ask",
            BackgroundColor = ColorUtil.FromDrawingColor(Color.Red)
        };

        _config.Data.Datasets.Add(dataset);
        
        await _chart.Update();
    }
    
    protected override void OnInitialized()
    {
        _config = new BarConfig
        {
            Options = new BarOptions
            {
                Responsive = true,
                Legend = new Legend
                {
                    Position = Position.Top
                },
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "Ask"
                },
                Animation = new Animation
                {
                    Duration = 0
                },
                Tooltips = new Tooltips
                {
                    Enabled = false
                },
            }
        };

        OrderBookService.OnChangeAsk += StateHasChangedHandler;
    }
    
    private async void StateHasChangedHandler()
    {
        await InvokeAsync(async () => 
        {
            await RenderAskChartAsync();
            StateHasChanged();
        });
    }

    public void Dispose()
    {
        OrderBookService.OnChangeAsk -= StateHasChangedHandler;
    }

}